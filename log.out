Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate ORM core version 5.5.5.Final
HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.username=root, hibernate.connection.password=****, hibernate.connection.driver=com.mysql.cj.jdbc.Driver, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, hibernate.connection.url=jdbc:mysql://localhost:3306/spring_h, hibernate.bytecode.use_reflection_optimizer=false, hibernate.hbm2ddl.auto=create}
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1e802ef9
Adding type registration true_false -> org.hibernate.type.TrueFalseType@670002
Adding type registration yes_no -> org.hibernate.type.YesNoType@56528192
Adding type registration byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration character -> org.hibernate.type.CharacterType@20d28811
Adding type registration char -> org.hibernate.type.CharacterType@20d28811
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@20d28811
Adding type registration short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration integer -> org.hibernate.type.IntegerType@65466a6a
Adding type registration int -> org.hibernate.type.IntegerType@65466a6a
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@65466a6a
Adding type registration long -> org.hibernate.type.LongType@4386f16
Adding type registration long -> org.hibernate.type.LongType@4386f16
Adding type registration java.lang.Long -> org.hibernate.type.LongType@4386f16
Adding type registration float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@ef9296d
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@ef9296d
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6ef888f6
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6ef888f6
Adding type registration string -> org.hibernate.type.StringType@bef2d72
Adding type registration java.lang.String -> org.hibernate.type.StringType@bef2d72
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@6fe7aac8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@76908cc0
Adding type registration url -> org.hibernate.type.UrlType@4c9f8c13
Adding type registration java.net.URL -> org.hibernate.type.UrlType@4c9f8c13
Adding type registration Duration -> org.hibernate.type.DurationType@49d904ec
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@49d904ec
Adding type registration Instant -> org.hibernate.type.InstantType@353d0772
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@353d0772
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@13e39c73
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@13e39c73
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@6580cfdd
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@6580cfdd
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@48ae9b55
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@48ae9b55
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@31d7b7bf
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@31d7b7bf
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@7a69b07
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@7a69b07
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@15eb5ee5
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@15eb5ee5
Adding type registration date -> org.hibernate.type.DateType@27ce24aa
Adding type registration java.sql.Date -> org.hibernate.type.DateType@27ce24aa
Adding type registration time -> org.hibernate.type.TimeType@3427b02d
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@3427b02d
Adding type registration timestamp -> org.hibernate.type.TimestampType@c33b74f
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@c33b74f
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@c33b74f
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@619713e5
Adding type registration calendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@50eac852
Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@6a192cfe
Adding type registration locale -> org.hibernate.type.LocaleType@1dde4cb2
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1dde4cb2
Adding type registration currency -> org.hibernate.type.CurrencyType@6eda5c9
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6eda5c9
Adding type registration timezone -> org.hibernate.type.TimeZoneType@1afd44cb
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1afd44cb
Adding type registration class -> org.hibernate.type.ClassType@479d31f3
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@479d31f3
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@795cd85e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@795cd85e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@123ef382
Adding type registration binary -> org.hibernate.type.BinaryType@7334aada
Adding type registration byte[] -> org.hibernate.type.BinaryType@7334aada
Adding type registration [B -> org.hibernate.type.BinaryType@7334aada
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration row_version -> org.hibernate.type.RowVersionType@15ff3e9e
Adding type registration image -> org.hibernate.type.ImageType@5e0826e7
Adding type registration characters -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration char[] -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration [C -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration text -> org.hibernate.type.TextType@5af3afd9
Adding type registration ntext -> org.hibernate.type.NTextType@694abbdc
Adding type registration blob -> org.hibernate.type.BlobType@1fa268de
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1fa268de
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@a514af7
Adding type registration clob -> org.hibernate.type.ClobType@4a94ee4
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4a94ee4
Adding type registration nclob -> org.hibernate.type.NClobType@1aa7ecca
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@1aa7ecca
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@7ec7ffd3
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@6b81ce95
Adding type registration serializable -> org.hibernate.type.SerializableType@245b4bdc
Adding type registration object -> org.hibernate.type.ObjectType@35cabb2a
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@35cabb2a
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@36bc55de
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@564fabc8
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@16d04d3d
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@49ec71f8
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1d2adfbe
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@36902638
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@223d2c72
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@8f4ea7c
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
HHH10001002: Using Hibernate built-in connection pool (not for production use!)
No driver class specified
HHH10001005: using driver [null] at URL [jdbc:mysql://localhost:3306/spring_h]
HHH10001001: Connection properties: {user=root, password=shema1, driver=com.mysql.cj.jdbc.Driver}
HHH10001003: Autocommit mode: false
HHH10001007: JDBC isolation level: REPEATABLE_READ
Initializing Connection pool with 1 Connections
HHH000115: Hibernate connection pool size: 20 (min=1)
Database ->
       name : MySQL
    version : 8.0.26
      major : 8
      minor : 0
Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.23 (Revision: 18bbd5e68195d0da083cbd5bd0d05d76320df7cd)
      major : 8
      minor : 0
JDBC version : 4.2
HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7d94beb9] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@560348e6]
Binding entity from annotated class: model.TableOne
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name TableOne
Bind entity model.TableOne on table t1
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t1), mappingColumn=keyy, insertable=true, updatable=true, unique=false}
Not known whether passed class name [model.TableOne] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableOne
MetadataSourceProcessor property keyy with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableOne:keyy]
building SimpleValue for keyy
Building property keyy
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(keyy)]), keyy, identity, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t1), mappingColumn=value, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property value with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableOne:value]
building SimpleValue for value
Building property value
Binding entity from annotated class: model.TableTwo
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name TableTwo
Bind entity model.TableTwo on table t2
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t2), mappingColumn=keyy, insertable=true, updatable=true, unique=false}
Not known whether passed class name [model.TableTwo] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableTwo
MetadataSourceProcessor property keyy with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableTwo:keyy]
building SimpleValue for keyy
Building property keyy
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(keyy)]), keyy, identity, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t2), mappingColumn=value, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property value with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableTwo:value]
building SimpleValue for value
Building property value
Starting fillSimpleValue for keyy
Starting fillSimpleValue for value
Starting fillSimpleValue for keyy
Starting fillSimpleValue for value
Forcing column [keyy] to be non-null as it is part of the primary key for table [t1]
Forcing column [keyy] to be non-null as it is part of the primary key for table [t2]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
Named query checking : enabled
Second-level cache: disabled
Second-level query cache: disabled
Second-level query cache factory: null
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: AFTER_TRANSACTION
Generate SQL with comments: disabled
JPA compliance - query : disabled
JPA compliance - closed-handling : disabled
JPA compliance - lists : disabled
JPA compliance - transactions : disabled
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL57Dialect, java.class.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\charsets.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\access-bridge-64.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\cldrdata.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\dnsns.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\jaccess.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\jfxrt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\localedata.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\nashorn.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunec.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunjce_provider.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunmscapi.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunpkcs11.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\zipfs.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jce.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfr.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfxswt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jsse.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\management-agent.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\resources.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\rt.jar;C:\Users\Lenovo\IdeaProjects\TestSber\target\classes;C:\Users\Lenovo\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\hibernate-core\5.5.5.Final\hibernate-core-5.5.5.Final.jar;C:\Users\Lenovo\.m2\repository\org\jboss\logging\jboss-logging\3.4.2.Final\jboss-logging-3.4.2.Final.jar;C:\Users\Lenovo\.m2\repository\org\javassist\javassist\3.27.0-GA\javassist-3.27.0-GA.jar;C:\Users\Lenovo\.m2\repository\net\bytebuddy\byte-buddy\1.11.8\byte-buddy-1.11.8.jar;C:\Users\Lenovo\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Lenovo\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\Lenovo\.m2\repository\org\jboss\jandex\2.2.3.Final\jandex-2.2.3.Final.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Lenovo\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Lenovo\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\Lenovo\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\Lenovo\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\Lenovo\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\Lenovo\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\Lenovo\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\Lenovo\.m2\repository\mysql\mysql-connector-java\8.0.23\mysql-connector-java-8.0.23.jar;C:\Users\Lenovo\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\validator\hibernate-validator\6.1.6.Final\hibernate-validator-6.1.6.Final.jar;C:\Users\Lenovo\.m2\repository\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar;C:\Users\Lenovo\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.13.0\jackson-databind-2.13.0.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.13.0\jackson-annotations-2.13.0.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.13.0\jackson-core-2.13.0.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2020.3.4\lib\idea_rt.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=, hibernate.connection.driver=com.mysql.cj.jdbc.Driver, os.name=Windows 10, java.vm.specification.version=1.8, user.country=RU, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\bin, sun.java.command=Main, sun.cpu.endian=little, user.home=C:\Users\Lenovo, user.language=ru, java.specification.vendor=Oracle Corporation, java.home=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre, file.separator=\, hibernate.connection.isolation=4, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\resources.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\rt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\sunrsasign.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jsse.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jce.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\charsets.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfr.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\classes, hibernate.hbm2ddl.auto=create, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_302-b08, user.name=Lenovo, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.endorsed.dirs=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\endorsed, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/spring_h, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, java.vendor.url.bug=https://github.com/corretto/corretto-8/issues/, java.io.tmpdir=C:\Users\Lenovo\AppData\Local\Temp\, java.version=1.8.0_302, user.dir=C:\Users\Lenovo\IdeaProjects\TestSber, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@c055c54, java.library.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Common Files\Autodesk Shared\;C:\Program Files (x86)\Autodesk\Backburner\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\ProgramData\DockerDesktop\version-bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Lenovo\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2\bin;;C:\Program Files\apache-maven-3.8.1\bin;;., java.vm.info=mixed mode, java.vendor=Amazon.com Inc., java.vm.version=25.302-b08, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
HV000001: Hibernate Validator 6.1.6.Final
Trying to load META-INF/validation.xml for XML based Validator configuration.
Trying to load META-INF/validation.xml via TCCL
Trying to load META-INF/validation.xml via Hibernate Validator's class loader
No META-INF/validation.xml found. Using annotation based configuration only.
Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
Failed to load expression factory via classloader sun.misc.Launcher$AppClassLoader@18b4aac2
java.lang.NoClassDefFoundError: javax/el/ExpressionFactory
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.canLoadExpressionFactory(ResourceBundleMessageInterpolator.java:216)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:170)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.<init>(ResourceBundleMessageInterpolator.java:94)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolator(AbstractConfigurationImpl.java:570)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(AbstractConfigurationImpl.java:790)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getMessageInterpolator(AbstractConfigurationImpl.java:480)
	at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.<init>(ValidatorFactoryImpl.java:151)
	at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.buildValidatorFactory(AbstractConfigurationImpl.java:448)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:103)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:501)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.activate(TypeSafeActivator.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.hibernate.cfg.beanvalidation.BeanValidationIntegrator.integrate(BeanValidationIntegrator.java:137)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:292)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:728)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:744)
	at config.HibernateConfig.sessionFactory(HibernateConfig.java:24)
	at dao.ThreadDaoImpl.<init>(ThreadDaoImpl.java:18)
	at service.ThreadServiceImpl.<init>(ThreadServiceImpl.java:14)
	at Main.<clinit>(Main.java:13)
Caused by: java.lang.ClassNotFoundException: javax.el.ExpressionFactory
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	... 25 more
Failed to load expression factory via classloader sun.misc.Launcher$AppClassLoader@18b4aac2
java.lang.NoClassDefFoundError: javax/el/ExpressionFactory
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.canLoadExpressionFactory(ResourceBundleMessageInterpolator.java:216)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:183)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.<init>(ResourceBundleMessageInterpolator.java:94)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolator(AbstractConfigurationImpl.java:570)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(AbstractConfigurationImpl.java:790)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getMessageInterpolator(AbstractConfigurationImpl.java:480)
	at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.<init>(ValidatorFactoryImpl.java:151)
	at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.buildValidatorFactory(AbstractConfigurationImpl.java:448)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:103)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:501)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.activate(TypeSafeActivator.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.hibernate.cfg.beanvalidation.BeanValidationIntegrator.integrate(BeanValidationIntegrator.java:137)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:292)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:728)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:744)
	at config.HibernateConfig.sessionFactory(HibernateConfig.java:24)
	at dao.ThreadDaoImpl.<init>(ThreadDaoImpl.java:18)
	at service.ThreadServiceImpl.<init>(ThreadServiceImpl.java:14)
	at Main.<clinit>(Main.java:13)
Unable to acquire Bean Validation ValidatorFactory, skipping activation
Skipping JACC integration as it was not enabled
Instantiated session factory
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7d94beb9] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@2cae1042]
Not known whether passed class name [model.TableTwo] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableTwo
Not known whether passed class name [model.TableOne] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableOne
Static SQL for entity: model.TableTwo
 Version select: select keyy from t2 where keyy =?
 Snapshot select: select tabletwo_.keyy, tabletwo_.value as value2_1_ from t2 tabletwo_ where tabletwo_.keyy=?
 Insert 0: insert into t2 (value, keyy) values (?, ?)
 Update 0: update t2 set value=? where keyy=?
 Delete 0: delete from t2 where keyy=?
 Identity insert: insert into t2 (value) values (?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4102b1b1]
Visiting attribute path : value
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=model.TableTwo)
    - Returns
       - EntityReturnImpl(entity=model.TableTwo, querySpaceUid=<gen:0>, path=model.TableTwo)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TableTwo)
          - SQL table alias mapping - tabletwo0_
          - alias suffix - 0_
          - suffixed key columns - {keyy1_1_0_}

Static select for entity model.TableTwo [NONE]: select tabletwo0_.keyy as keyy1_1_0_, tabletwo0_.value as value2_1_0_ from t2 tabletwo0_ where tabletwo0_.keyy=?
Static SQL for entity: model.TableOne
 Version select: select keyy from t1 where keyy =?
 Snapshot select: select tableone_.keyy, tableone_.value as value2_0_ from t1 tableone_ where tableone_.keyy=?
 Insert 0: insert into t1 (value, keyy) values (?, ?)
 Update 0: update t1 set value=? where keyy=?
 Delete 0: delete from t1 where keyy=?
 Identity insert: insert into t1 (value) values (?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1f2d2181]
Visiting attribute path : value
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=model.TableOne)
    - Returns
       - EntityReturnImpl(entity=model.TableOne, querySpaceUid=<gen:0>, path=model.TableOne)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TableOne)
          - SQL table alias mapping - tableone0_
          - alias suffix - 0_
          - suffixed key columns - {keyy1_0_0_}

Static select for entity model.TableOne [NONE]: select tableone0_.keyy as keyy1_0_0_, tableone0_.value as value2_0_0_ from t1 tableone0_ where tableone0_.keyy=?
drop table if exists t1
HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@55b62629] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
drop table if exists t2
create table t1 (keyy bigint not null auto_increment, value varchar(255), primary key (keyy)) engine=InnoDB
HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@771158fb] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
create table t2 (keyy bigint not null auto_increment, value varchar(255), primary key (keyy)) engine=InnoDB
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@2fa3be26
Registering SessionFactory: 11c3c4cb-53e6-4544-92ff-2ca07ae194fc (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
Adding type registration boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@161479c6
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1e802ef9
Adding type registration true_false -> org.hibernate.type.TrueFalseType@670002
Adding type registration yes_no -> org.hibernate.type.YesNoType@56528192
Adding type registration byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1f3f4916
Adding type registration character -> org.hibernate.type.CharacterType@20d28811
Adding type registration char -> org.hibernate.type.CharacterType@20d28811
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@20d28811
Adding type registration short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@7adda9cc
Adding type registration integer -> org.hibernate.type.IntegerType@65466a6a
Adding type registration int -> org.hibernate.type.IntegerType@65466a6a
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@65466a6a
Adding type registration long -> org.hibernate.type.LongType@4386f16
Adding type registration long -> org.hibernate.type.LongType@4386f16
Adding type registration java.lang.Long -> org.hibernate.type.LongType@4386f16
Adding type registration float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@7f552bd3
Adding type registration double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@3aefe5e5
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@ef9296d
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@ef9296d
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6ef888f6
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6ef888f6
Adding type registration string -> org.hibernate.type.StringType@bef2d72
Adding type registration java.lang.String -> org.hibernate.type.StringType@bef2d72
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@6fe7aac8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@76908cc0
Adding type registration url -> org.hibernate.type.UrlType@4c9f8c13
Adding type registration java.net.URL -> org.hibernate.type.UrlType@4c9f8c13
Adding type registration Duration -> org.hibernate.type.DurationType@49d904ec
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@49d904ec
Adding type registration Instant -> org.hibernate.type.InstantType@353d0772
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@353d0772
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@13e39c73
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@13e39c73
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@6580cfdd
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@6580cfdd
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@48ae9b55
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@48ae9b55
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@31d7b7bf
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@31d7b7bf
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@7a69b07
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@7a69b07
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@15eb5ee5
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@15eb5ee5
Adding type registration date -> org.hibernate.type.DateType@27ce24aa
Adding type registration java.sql.Date -> org.hibernate.type.DateType@27ce24aa
Adding type registration time -> org.hibernate.type.TimeType@3427b02d
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@3427b02d
Adding type registration timestamp -> org.hibernate.type.TimestampType@c33b74f
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@c33b74f
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@c33b74f
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@619713e5
Adding type registration calendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@243c4f91
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@50eac852
Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@6a192cfe
Adding type registration locale -> org.hibernate.type.LocaleType@1dde4cb2
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1dde4cb2
Adding type registration currency -> org.hibernate.type.CurrencyType@6eda5c9
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6eda5c9
Adding type registration timezone -> org.hibernate.type.TimeZoneType@1afd44cb
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1afd44cb
Adding type registration class -> org.hibernate.type.ClassType@479d31f3
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@479d31f3
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@795cd85e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@795cd85e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@123ef382
Adding type registration binary -> org.hibernate.type.BinaryType@7334aada
Adding type registration byte[] -> org.hibernate.type.BinaryType@7334aada
Adding type registration [B -> org.hibernate.type.BinaryType@7334aada
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@52e6fdee
Adding type registration row_version -> org.hibernate.type.RowVersionType@15ff3e9e
Adding type registration image -> org.hibernate.type.ImageType@5e0826e7
Adding type registration characters -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration char[] -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration [C -> org.hibernate.type.CharArrayType@3ce1e309
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@7c729a55
Adding type registration text -> org.hibernate.type.TextType@5af3afd9
Adding type registration ntext -> org.hibernate.type.NTextType@694abbdc
Adding type registration blob -> org.hibernate.type.BlobType@1fa268de
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1fa268de
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@a514af7
Adding type registration clob -> org.hibernate.type.ClobType@4a94ee4
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4a94ee4
Adding type registration nclob -> org.hibernate.type.NClobType@1aa7ecca
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@1aa7ecca
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@7ec7ffd3
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@6b81ce95
Adding type registration serializable -> org.hibernate.type.SerializableType@245b4bdc
Adding type registration object -> org.hibernate.type.ObjectType@35cabb2a
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@35cabb2a
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@3eed0f5
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@64030b91
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@2032e725
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4d23015c
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@383f1975
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@441cc260
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@73a00e09
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@26dcd8c0
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
HHH10001002: Using Hibernate built-in connection pool (not for production use!)
No driver class specified
HHH10001005: using driver [null] at URL [jdbc:mysql://localhost:3306/spring_h]
HHH10001001: Connection properties: {user=root, password=shema1, driver=com.mysql.cj.jdbc.Driver}
HHH10001003: Autocommit mode: false
HHH10001007: JDBC isolation level: REPEATABLE_READ
Initializing Connection pool with 1 Connections
HHH000115: Hibernate connection pool size: 20 (min=1)
Database ->
       name : MySQL
    version : 8.0.26
      major : 8
      minor : 0
Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.23 (Revision: 18bbd5e68195d0da083cbd5bd0d05d76320df7cd)
      major : 8
      minor : 0
JDBC version : 4.2
HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@55b8dbda] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3b569985]
Binding entity from annotated class: model.TableOne
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name TableOne
Bind entity model.TableOne on table t1
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t1), mappingColumn=keyy, insertable=true, updatable=true, unique=false}
Not known whether passed class name [model.TableOne] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableOne
MetadataSourceProcessor property keyy with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableOne:keyy]
building SimpleValue for keyy
Building property keyy
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(keyy)]), keyy, identity, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t1), mappingColumn=value, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property value with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableOne:value]
building SimpleValue for value
Building property value
Binding entity from annotated class: model.TableTwo
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name TableTwo
Bind entity model.TableTwo on table t2
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t2), mappingColumn=keyy, insertable=true, updatable=true, unique=false}
Not known whether passed class name [model.TableTwo] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableTwo
MetadataSourceProcessor property keyy with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableTwo:keyy]
building SimpleValue for keyy
Building property keyy
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(keyy)]), keyy, identity, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(t2), mappingColumn=value, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property value with lazy=false
Attempting to locate auto-apply AttributeConverter for property [model.TableTwo:value]
building SimpleValue for value
Building property value
Starting fillSimpleValue for keyy
Starting fillSimpleValue for value
Starting fillSimpleValue for keyy
Starting fillSimpleValue for value
Forcing column [keyy] to be non-null as it is part of the primary key for table [t1]
Forcing column [keyy] to be non-null as it is part of the primary key for table [t2]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
Named query checking : enabled
Second-level cache: disabled
Second-level query cache: disabled
Second-level query cache factory: null
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: AFTER_TRANSACTION
Generate SQL with comments: disabled
JPA compliance - query : disabled
JPA compliance - closed-handling : disabled
JPA compliance - lists : disabled
JPA compliance - transactions : disabled
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL57Dialect, java.class.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\charsets.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\access-bridge-64.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\cldrdata.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\dnsns.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\jaccess.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\jfxrt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\localedata.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\nashorn.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunec.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunjce_provider.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunmscapi.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\sunpkcs11.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext\zipfs.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jce.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfr.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfxswt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jsse.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\management-agent.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\resources.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\rt.jar;C:\Users\Lenovo\IdeaProjects\TestSber\target\classes;C:\Users\Lenovo\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\hibernate-core\5.5.5.Final\hibernate-core-5.5.5.Final.jar;C:\Users\Lenovo\.m2\repository\org\jboss\logging\jboss-logging\3.4.2.Final\jboss-logging-3.4.2.Final.jar;C:\Users\Lenovo\.m2\repository\org\javassist\javassist\3.27.0-GA\javassist-3.27.0-GA.jar;C:\Users\Lenovo\.m2\repository\net\bytebuddy\byte-buddy\1.11.8\byte-buddy-1.11.8.jar;C:\Users\Lenovo\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Lenovo\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\Lenovo\.m2\repository\org\jboss\jandex\2.2.3.Final\jandex-2.2.3.Final.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Lenovo\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Lenovo\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\Lenovo\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\Lenovo\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\Lenovo\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\Lenovo\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\Lenovo\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\Lenovo\.m2\repository\mysql\mysql-connector-java\8.0.23\mysql-connector-java-8.0.23.jar;C:\Users\Lenovo\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar;C:\Users\Lenovo\.m2\repository\org\hibernate\validator\hibernate-validator\6.1.6.Final\hibernate-validator-6.1.6.Final.jar;C:\Users\Lenovo\.m2\repository\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar;C:\Users\Lenovo\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.13.0\jackson-databind-2.13.0.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.13.0\jackson-annotations-2.13.0.jar;C:\Users\Lenovo\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.13.0\jackson-core-2.13.0.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2020.3.4\lib\idea_rt.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=, hibernate.connection.driver=com.mysql.cj.jdbc.Driver, os.name=Windows 10, java.vm.specification.version=1.8, user.country=RU, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\bin, sun.java.command=Main, sun.cpu.endian=little, user.home=C:\Users\Lenovo, user.language=ru, java.specification.vendor=Oracle Corporation, java.home=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre, file.separator=\, hibernate.connection.isolation=4, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\resources.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\rt.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\sunrsasign.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jsse.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jce.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\charsets.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\jfr.jar;C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\classes, hibernate.hbm2ddl.auto=create, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_302-b08, user.name=Lenovo, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.endorsed.dirs=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\endorsed, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/spring_h, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, java.vendor.url.bug=https://github.com/corretto/corretto-8/issues/, java.io.tmpdir=C:\Users\Lenovo\AppData\Local\Temp\, java.version=1.8.0_302, user.dir=C:\Users\Lenovo\IdeaProjects\TestSber, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2dbd803f, java.library.path=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Common Files\Autodesk Shared\;C:\Program Files (x86)\Autodesk\Backburner\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\ProgramData\DockerDesktop\version-bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Lenovo\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2\bin;;C:\Program Files\apache-maven-3.8.1\bin;;., java.vm.info=mixed mode, java.vendor=Amazon.com Inc., java.vm.version=25.302-b08, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Users\Lenovo\.jdks\corretto-1.8.0_302\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Trying to load META-INF/validation.xml for XML based Validator configuration.
Trying to load META-INF/validation.xml via TCCL
Trying to load META-INF/validation.xml via Hibernate Validator's class loader
No META-INF/validation.xml found. Using annotation based configuration only.
Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
Failed to load expression factory via classloader sun.misc.Launcher$AppClassLoader@18b4aac2
java.lang.NoClassDefFoundError: javax/el/ExpressionFactory
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.canLoadExpressionFactory(ResourceBundleMessageInterpolator.java:216)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:170)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.<init>(ResourceBundleMessageInterpolator.java:94)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolator(AbstractConfigurationImpl.java:570)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(AbstractConfigurationImpl.java:790)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getMessageInterpolator(AbstractConfigurationImpl.java:480)
	at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.<init>(ValidatorFactoryImpl.java:151)
	at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.buildValidatorFactory(AbstractConfigurationImpl.java:448)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:103)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:501)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.activate(TypeSafeActivator.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.hibernate.cfg.beanvalidation.BeanValidationIntegrator.integrate(BeanValidationIntegrator.java:137)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:292)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:728)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:744)
	at config.HibernateConfig.sessionFactory(HibernateConfig.java:24)
	at Main.<clinit>(Main.java:15)
Failed to load expression factory via classloader sun.misc.Launcher$AppClassLoader@18b4aac2
java.lang.NoClassDefFoundError: javax/el/ExpressionFactory
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.canLoadExpressionFactory(ResourceBundleMessageInterpolator.java:216)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:183)
	at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.<init>(ResourceBundleMessageInterpolator.java:94)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolator(AbstractConfigurationImpl.java:570)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(AbstractConfigurationImpl.java:790)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.getMessageInterpolator(AbstractConfigurationImpl.java:480)
	at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.<init>(ValidatorFactoryImpl.java:151)
	at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38)
	at org.hibernate.validator.internal.engine.AbstractConfigurationImpl.buildValidatorFactory(AbstractConfigurationImpl.java:448)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:103)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:501)
	at org.hibernate.cfg.beanvalidation.TypeSafeActivator.activate(TypeSafeActivator.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.hibernate.cfg.beanvalidation.BeanValidationIntegrator.integrate(BeanValidationIntegrator.java:137)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:292)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:728)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:744)
	at config.HibernateConfig.sessionFactory(HibernateConfig.java:24)
	at Main.<clinit>(Main.java:15)
Unable to acquire Bean Validation ValidatorFactory, skipping activation
Skipping JACC integration as it was not enabled
Instantiated session factory
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@55b8dbda] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@660591fb]
Not known whether passed class name [model.TableTwo] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableTwo
Not known whether passed class name [model.TableOne] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TableOne
Static SQL for entity: model.TableTwo
 Version select: select keyy from t2 where keyy =?
 Snapshot select: select tabletwo_.keyy, tabletwo_.value as value2_1_ from t2 tabletwo_ where tabletwo_.keyy=?
 Insert 0: insert into t2 (value, keyy) values (?, ?)
 Update 0: update t2 set value=? where keyy=?
 Delete 0: delete from t2 where keyy=?
 Identity insert: insert into t2 (value) values (?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@985696]
Visiting attribute path : value
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=model.TableTwo)
    - Returns
       - EntityReturnImpl(entity=model.TableTwo, querySpaceUid=<gen:0>, path=model.TableTwo)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TableTwo)
          - SQL table alias mapping - tabletwo0_
          - alias suffix - 0_
          - suffixed key columns - {keyy1_1_0_}

Static select for entity model.TableTwo [NONE]: select tabletwo0_.keyy as keyy1_1_0_, tabletwo0_.value as value2_1_0_ from t2 tabletwo0_ where tabletwo0_.keyy=?
Static SQL for entity: model.TableOne
 Version select: select keyy from t1 where keyy =?
 Snapshot select: select tableone_.keyy, tableone_.value as value2_0_ from t1 tableone_ where tableone_.keyy=?
 Insert 0: insert into t1 (value, keyy) values (?, ?)
 Update 0: update t1 set value=? where keyy=?
 Delete 0: delete from t1 where keyy=?
 Identity insert: insert into t1 (value) values (?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@215a34b4]
Visiting attribute path : value
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=model.TableOne)
    - Returns
       - EntityReturnImpl(entity=model.TableOne, querySpaceUid=<gen:0>, path=model.TableOne)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TableOne)
          - SQL table alias mapping - tableone0_
          - alias suffix - 0_
          - suffixed key columns - {keyy1_0_0_}

Static select for entity model.TableOne [NONE]: select tableone0_.keyy as keyy1_0_0_, tableone0_.value as value2_0_0_ from t1 tableone0_ where tableone0_.keyy=?
drop table if exists t1
HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@71870da7] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
drop table if exists t2
create table t1 (keyy bigint not null auto_increment, value varchar(255), primary key (keyy)) engine=InnoDB
HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@45792847] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
create table t2 (keyy bigint not null auto_increment, value varchar(255), primary key (keyy)) engine=InnoDB
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
Registering SessionFactory: 815f34e8-1640-426f-9cb9-9880c44c8876 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 1
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 2
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 3
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 4
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 5
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 6
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 7
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 8
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 9
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 9 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Executing identity-insert immediately
insert into t1 (value) values (?)
Natively generated identity: 10
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#3]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=3
Поток threadA проверяет трогал ли он ранее запись с id=3
Поток threadA записал свое имя в массив записи с id=3
Поток threadA установил флаг=true для записи с id=3
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA обновил данные в таблице т1 к записи с id=3
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#10]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=10
Поток threadB проверяет трогал ли он ранее запись с id=10
Поток threadB записал свое имя в массив записи с id=10
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=10
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#5]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=5
Поток threadA проверяет трогал ли он ранее запись с id=5
Поток threadA проверил, что условия переноса записи соблюдены для id=5
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 1
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=5в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=5, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=5
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#6]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=6
Поток threadB проверяет трогал ли он ранее запись с id=6
Поток threadB записал свое имя в массив записи с id=6
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=6
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#1]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":[null,null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=1
Поток threadA проверяет трогал ли он ранее запись с id=1
Поток threadA записал свое имя в массив записи с id=1
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA обновил данные в таблице т1 к записи с id=1
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#9]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=9
Поток threadB проверяет трогал ли он ранее запись с id=9
Поток threadB проверил, что условия переноса записи соблюдены для id=9
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 2
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB сохранил запись с id=9в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=9, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB удалил запись из таблицы т1 с id=9
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#7]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":false,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=7
Поток threadA проверяет трогал ли он ранее запись с id=7
Поток threadA записал свое имя в массив записи с id=7
Поток threadA установил флаг=true для записи с id=7
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA обновил данные в таблице т1 к записи с id=7
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#4]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=4
Поток threadB проверяет трогал ли он ранее запись с id=4
Поток threadB записал свое имя в массив записи с id=4
Поток threadB установил флаг=true для записи с id=4
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=4
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#2]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=2
Поток threadA проверяет трогал ли он ранее запись с id=2
Поток threadA проверил, что условия переноса записи соблюдены для id=2
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 3
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=2в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=2
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#7]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=7
Поток threadB проверяет трогал ли он ранее запись с id=7
Поток threadB записал свое имя в массив записи с id=7
Поток threadB установил флаг=true для записи с id=7
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=7
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#6]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=6
Поток threadA проверяет трогал ли он ранее запись с id=6
Поток threadA записал свое имя в массив записи с id=6
Поток threadA установил флаг=true для записи с id=6
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA обновил данные в таблице т1 к записи с id=6
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#10]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=10
Поток threadB проверяет трогал ли он ранее запись с id=10
Поток threadB проверил, что ранее уже трогал эту запись с id=10
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#4]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=4
Поток threadA проверяет трогал ли он ранее запись с id=4
Поток threadA проверил, что условия переноса записи соблюдены для id=4
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 4
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=4в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=4
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#6]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=6
Поток threadB проверяет трогал ли он ранее запись с id=6
Поток threadB проверил, что ранее уже трогал эту запись с id=6
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#7]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=7
Поток threadA проверяет трогал ли он ранее запись с id=7
Поток threadA проверил, что ранее уже трогал эту запись с id=7
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#3]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=3
Поток threadB проверяет трогал ли он ранее запись с id=3
Поток threadB проверил, что условия переноса записи соблюдены для id=3
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 5
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB сохранил запись с id=3в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=3, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB удалил запись из таблицы т1 с id=3
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#6]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=6
Поток threadA проверяет трогал ли он ранее запись с id=6
Поток threadA проверил, что условия переноса записи соблюдены для id=6
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 6
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=6в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=6
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#8]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":false,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=8
Поток threadB проверяет трогал ли он ранее запись с id=8
Поток threadB записал свое имя в массив записи с id=8
Поток threadB установил флаг=true для записи с id=8
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=8
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#8]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=8
Поток threadA проверяет трогал ли он ранее запись с id=8
Поток threadA проверил, что условия переноса записи соблюдены для id=8
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 7
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=8в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=8
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#7]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=7
Поток threadB проверяет трогал ли он ранее запись с id=7
Поток threadB проверил, что условия переноса записи соблюдены для id=7
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 8
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB сохранил запись с id=7в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableOne{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB удалил запись из таблицы т1 с id=7
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#10]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":false,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=10
Поток threadA проверяет трогал ли он ранее запись с id=10
Поток threadA записал свое имя в массив записи с id=10
Поток threadA установил флаг=true для записи с id=10
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA обновил данные в таблице т1 к записи с id=10
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#10]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=10
Поток threadB проверяет трогал ли он ранее запись с id=10
Поток threadB проверил, что ранее уже трогал эту запись с id=10
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#10]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA получил запись id=10
Поток threadA проверяет трогал ли он ранее запись с id=10
Поток threadA проверил, что условия переноса записи соблюдены для id=10
begin
Executing identity-insert immediately
insert into t2 (value) values (?)
Natively generated identity: 9
HHH000387: ResultSet's statement was not registered
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=9, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA сохранил запись с id=10в таблицу т2
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 1 deletions to 11 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableOne{keyy=10, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=9, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
delete from t1 where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadA удалил запись из таблицы т1 с id=10
begin
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=9, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
SELECT * FROM `t1` ORDER BY RAND() LIMIT 1 
Result set row: 0
Result row: EntityKey[model.TableOne#1]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=9, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":false,"queue":["threadA",null]}}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB получил запись id=1
Поток threadB проверяет трогал ли он ранее запись с id=1
Поток threadB записал свое имя в массив записи с id=1
Поток threadB установил флаг=true для записи с id=1
begin
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 1 updates, 0 deletions to 10 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
model.TableTwo{keyy=1, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=3, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=2, value={"threadA":true,"threadB":true,"queue":[null,null]}}
model.TableTwo{keyy=5, value={"threadA":true,"threadB":true,"queue":["threadA",null]}}
model.TableTwo{keyy=4, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=7, value={"threadA":true,"threadB":true,"queue":["threadB",null]}}
model.TableTwo{keyy=6, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=9, value={"threadA":true,"threadB":true,"queue":["threadB","threadA"]}}
model.TableTwo{keyy=8, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
model.TableOne{keyy=1, value={"threadA":true,"threadB":true,"queue":["threadA","threadB"]}}
update t1 set value=? where keyy=?
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
Поток threadB обновил данные в таблице т1 к записи с id=1
